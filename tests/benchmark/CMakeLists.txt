# NOTE: ENABLE_BENCHMARKING configuration option is set to ON for the time being.
#       Therefore, the unit and performance executables will be always built using the 
#       current build server configuration.
# TODO:
#       (1) Have a custom build configuration that sets the configuration option
#           -DENABLE_BENCHMARKING=ON. This allows max automation, especially if
#           the benchmark builds are to be scheduled, say on a weekly basis.
#           Otherwise check if TC allows building with parameters to enable
#           the build and execution of the benchamrking executables on demand.
#       (2) Make the default value of ENABLE_BENCHMARKING OFF in this script.
#       (3) Decide if this option should be move to the root CMakeLists.txt
#       (4) Change the mode of the message in the else body of if(ENABLE_BENCHMARKING)
#           from AUTHOR_WARNING (Warning (dev), continue processing)
#           to FATAL_ERROR (stop processing and generation)
#       (5) Document this in README.md (how to manually configure a build with benchmarking)
#       (6) Remove this commnent.
option(
  ENABLE_BENCHMARKING
  "Enable building and running the benchmark unit and performance executables."
  ON
)

if(ENABLE_BENCHMARKING)
  # upcase the build type to make the option case-insensitive
  string(TOUPPER "${CMAKE_BUILD_TYPE}" UPCASED_CMAKE_BUILD_TYPE)

  if(UPCASED_CMAKE_BUILD_TYPE STREQUAL "RELEASE" 
    OR UPCASED_CMAKE_BUILD_TYPE STREQUAL "RELWITHDEBINFO"
  )
    # Fetch google benchmark dependency
    FetchContent_Declare(
      googlebenchmark
      GIT_REPOSITORY https://github.com/google/benchmark.git
      GIT_TAG v1.7.1
    )

    FetchContent_GetProperties(benchmark)

    # Prevent the google benchmark's own tests from running
    set(BENCHMARK_ENABLE_TESTING OFF)

    if(NOT googlebenchmark_POPULATED)
      FetchContent_Populate(googlebenchmark)
      add_subdirectory(
        ${googlebenchmark_SOURCE_DIR}
        ${googlebenchmark_BINARY_DIR}
        EXCLUDE_FROM_ALL
      )
    endif()

      # set the root, src and include paths to custom memory manager
    set(CUSTOM_MEMORY_MANAGER_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/custom_memory_manager)
    set(CUSTOM_MEMORY_MANAGER_SRC_DIR ${CUSTOM_MEMORY_MANAGER_ROOT_DIR}/src)
    set(CUSTOM_MEMORY_MANAGER_INCLUDE_DIR ${CUSTOM_MEMORY_MANAGER_ROOT_DIR}/include)

    # list of custom memory manager sources
    set(CUSTOM_MEMORY_MANAGER_SRC_LIST
      ${CUSTOM_MEMORY_MANAGER_SRC_DIR}/custom_memory_management.cpp
      ${CUSTOM_MEMORY_MANAGER_SRC_DIR}/new_delete_global_replacements.cpp
    )

    # list of custom memory manager headers
    set(CUSTOM_MEMORY_MANAGER_HEADER_LIST
      ${CUSTOM_MEMORY_MANAGER_INCLUDE_DIR}/custom_memory_manager.hpp
      ${CUSTOM_MEMORY_MANAGER_INCLUDE_DIR}/memory_management.hpp
      ${CUSTOM_MEMORY_MANAGER_INCLUDE_DIR}/platform.hpp
    )

    # Add unit tests
    add_subdirectory(unit)

    # Add unit performance tests
    add_subdirectory(performance)
  else()
    message(
      AUTHOR_WARNING
      "The benchmark unit and performance tests can be built only if the "
      "build is configured with CMAKE_BUILD_TYPE set to Release or RelWithDebInfo. "
      "The current build is configured with CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}."
    )
  endif()
endif()
