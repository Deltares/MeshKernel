#include <gtest/gtest.h>

#include <MeshKernel/CurvilinearGrid/CurvilinearGrid.hpp>
#include <MeshKernel/CurvilinearGrid/CurvilinearGridSnapGridToLandBoundary.hpp>
#include <MeshKernel/CurvilinearGrid/CurvilinearGridSnapGridToSpline.hpp>
#include <MeshKernel/CurvilinearGrid/CurvilinearGridSnapping.hpp>
#include <MeshKernel/Entities.hpp>
#include <MeshKernel/Utilities/LinearAlgebra.hpp>
#include <TestUtils/MakeCurvilinearGrids.hpp>

using namespace meshkernel;

namespace snapping
{
    constexpr double tolerance = 1.0e-8;

    lin_alg::Matrix<Point> GetGridPoints10x10()
    {
        lin_alg::Matrix<Point> gridPoints(11, 11);

        gridPoints << Point{0.0e+00, 0.0e+00}, Point{0.0e+00, 1.0e+01}, Point{0.0e+00, 2.0e+01}, Point{0.0e+00, 3.0e+01}, Point{0.0e+00, 4.0e+01}, Point{0.0e+00, 5.0e+01}, Point{0.0e+00, 6.0e+01}, Point{0.0e+00, 7.0e+01}, Point{0.0e+00, 8.0e+01}, Point{0.0e+00, 9.0e+01}, Point{0.0e+00, 1.0e+02},
            Point{1.0e+01, 0.0e+00}, Point{1.0e+01, 1.0e+01}, Point{1.0e+01, 2.0e+01}, Point{1.0e+01, 3.0e+01}, Point{1.0e+01, 4.0e+01}, Point{1.0e+01, 5.0e+01}, Point{1.0e+01, 6.0e+01}, Point{1.0e+01, 7.0e+01}, Point{1.0e+01, 8.0e+01}, Point{1.0e+01, 9.0e+01}, Point{1.0e+01, 1.0e+02},
            Point{2.0e+01, 0.0e+00}, Point{2.0e+01, 1.0e+01}, Point{2.0e+01, 2.0e+01}, Point{2.0e+01, 3.0e+01}, Point{2.0e+01, 4.0e+01}, Point{2.0e+01, 5.0e+01}, Point{2.0e+01, 6.0e+01}, Point{2.0e+01, 7.0e+01}, Point{2.0e+01, 8.0e+01}, Point{2.0e+01, 9.0e+01}, Point{2.0e+01, 1.0e+02},
            Point{3.0e+01, 0.0e+00}, Point{3.0e+01, 1.0e+01}, Point{3.0e+01, 2.0e+01}, Point{3.0e+01, 3.0e+01}, Point{3.0e+01, 4.0e+01}, Point{3.0e+01, 5.0e+01}, Point{3.0e+01, 6.0e+01}, Point{3.0e+01, 7.0e+01}, Point{3.0e+01, 8.0e+01}, Point{3.0e+01, 9.0e+01}, Point{3.0e+01, 1.0e+02},
            Point{4.0e+01, 0.0e+00}, Point{4.0e+01, 1.0e+01}, Point{4.0e+01, 2.0e+01}, Point{4.0e+01, 3.0e+01}, Point{4.0e+01, 4.0e+01}, Point{4.0e+01, 5.0e+01}, Point{4.0e+01, 6.0e+01}, Point{4.0e+01, 7.0e+01}, Point{4.0e+01, 8.0e+01}, Point{4.0e+01, 9.0e+01}, Point{4.0e+01, 1.0e+02},
            Point{5.0e+01, 0.0e+00}, Point{5.0e+01, 1.0e+01}, Point{5.0e+01, 2.0e+01}, Point{5.0e+01, 3.0e+01}, Point{5.0e+01, 4.0e+01}, Point{5.0e+01, 5.0e+01}, Point{5.0e+01, 6.0e+01}, Point{5.0e+01, 7.0e+01}, Point{5.0e+01, 8.0e+01}, Point{5.0e+01, 9.0e+01}, Point{5.0e+01, 1.0e+02},
            Point{6.0e+01, 0.0e+00}, Point{6.0e+01, 1.0e+01}, Point{6.0e+01, 2.0e+01}, Point{6.0e+01, 3.0e+01}, Point{6.0e+01, 4.0e+01}, Point{6.0e+01, 5.0e+01}, Point{6.0e+01, 6.0e+01}, Point{6.0e+01, 7.0e+01}, Point{6.0e+01, 8.0e+01}, Point{6.0e+01, 9.0e+01}, Point{6.0e+01, 1.0e+02},
            Point{7.0e+01, 0.0e+00}, Point{7.0e+01, 1.0e+01}, Point{7.0e+01, 2.0e+01}, Point{7.0e+01, 3.0e+01}, Point{7.0e+01, 4.0e+01}, Point{7.0e+01, 5.0e+01}, Point{7.0e+01, 6.0e+01}, Point{7.0e+01, 7.0e+01}, Point{7.0e+01, 8.0e+01}, Point{7.0e+01, 9.0e+01}, Point{7.0e+01, 1.0e+02},
            Point{8.0e+01, 0.0e+00}, Point{8.0e+01, 1.0e+01}, Point{8.0e+01, 2.0e+01}, Point{8.0e+01, 3.0e+01}, Point{8.0e+01, 4.0e+01}, Point{8.0e+01, 5.0e+01}, Point{8.0e+01, 6.0e+01}, Point{8.0e+01, 7.0e+01}, Point{8.0e+01, 8.0e+01}, Point{8.0e+01, 9.0e+01}, Point{8.0e+01, 1.0e+02},
            Point{9.0e+01, 0.0e+00}, Point{9.0e+01, 1.0e+01}, Point{9.0e+01, 2.0e+01}, Point{9.0e+01, 3.0e+01}, Point{9.0e+01, 4.0e+01}, Point{9.0e+01, 5.0e+01}, Point{9.0e+01, 6.0e+01}, Point{9.0e+01, 7.0e+01}, Point{9.0e+01, 8.0e+01}, Point{9.0e+01, 9.0e+01}, Point{9.0e+01, 1.0e+02},
            Point{1.0e+02, 0.0e+00}, Point{1.0e+02, 1.0e+01}, Point{1.0e+02, 2.0e+01}, Point{1.0e+02, 3.0e+01}, Point{1.0e+02, 4.0e+01}, Point{1.0e+02, 5.0e+01}, Point{1.0e+02, 6.0e+01}, Point{1.0e+02, 7.0e+01}, Point{1.0e+02, 8.0e+01}, Point{1.0e+02, 9.0e+01}, Point{1.0e+02, 1.0e+02};

        return gridPoints;
    }

} // namespace snapping

TEST(SnapCurvilinearGridToLandBoundary, SnappingThreeSides)

{

    // Tests the mapping of the grid to land boundaries on 3 sides of the mesh.
    // First east side, then west followed by the north side.

    std::vector<Point> eastLandBoundaryPoints{{104.303970, 97.152596},
                                              {103.697906, 4.303172}};

    std::vector<Point> westLandBoundaryPoints{{-14.659142, 92.061630},
                                              {-26.901642, 75.940262},
                                              {-32.235008, 52.667297},
                                              {-30.780455, 31.091324},
                                              {-18.659166, 7.939575}};

    std::vector<Point> northLandBoundaryPoints{{-10.614098, 100.910210},
                                               {-1.765560, 105.637527},
                                               {17.628498, 104.182968},
                                               {42.355930, 106.728447},
                                               {65.871231, 101.758698},
                                               {85.992554, 107.092087},
                                               {99.568405, 101.758698}};

    std::vector<Point> snappingLine;

    LandBoundary eastLandBoundary(eastLandBoundaryPoints);
    LandBoundary westLandBoundary(westLandBoundaryPoints);
    LandBoundary northLandBoundary(northLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    std::vector<std::vector<double>> eastMappedPointsX{{0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00},
                                                       {1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01},
                                                       {2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01},
                                                       {3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01},
                                                       {4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01},
                                                       {5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01},
                                                       {6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01},
                                                       {7.004693591492e+01, 7.004740587316e+01, 7.004823433058e+01, 7.004906278800e+01, 7.004989124542e+01, 7.005071970284e+01, 7.005154816026e+01, 7.005237661767e+01, 7.005320507509e+01, 7.005403353251e+01, 7.005462842207e+01},
                                                       {8.117506417584e+01, 8.118682981612e+01, 8.120757066319e+01, 8.122831151026e+01, 8.124905235733e+01, 8.126979320440e+01, 8.129053405147e+01, 8.131127489854e+01, 8.133201574561e+01, 8.135275659268e+01, 8.136764995132e+01},
                                                       {9.289121938464e+01, 9.292016848203e+01, 9.297120087697e+01, 9.302223327191e+01, 9.307326566685e+01, 9.312429806180e+01, 9.317533045674e+01, 9.322636285168e+01, 9.327739524662e+01, 9.332842764156e+01, 9.336507242069e+01},
                                                       {1.036979060000e+02, 1.037349322601e+02, 1.038002033358e+02, 1.038654744116e+02, 1.039307454873e+02, 1.039960165631e+02, 1.040612876388e+02, 1.041265587146e+02, 1.041918297903e+02, 1.042571008661e+02, 1.043039700000e+02}};

    std::vector<std::vector<double>> eastMappedPointsY{{0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {5.461829340576e-02, 9.999690563583e+00, 1.999968515592e+01, 2.999967974826e+01, 3.999967434060e+01, 4.999966893294e+01, 5.999966352528e+01, 6.999965811762e+01, 7.999965270996e+01, 8.999964730229e+01, 9.996385913760e+01},
                                                       {1.367396375047e+00, 9.992253104062e+00, 1.999211772055e+01, 2.999198233705e+01, 3.999184695354e+01, 4.999171157003e+01, 5.999157618652e+01, 6.999144080301e+01, 7.999130541951e+01, 8.999117003600e+01, 9.909519537962e+01},
                                                       {3.364448501894e+00, 9.980938934087e+00, 1.998060582596e+01, 2.998027271784e+01, 3.997993960972e+01, 4.997960650159e+01, 5.997927339347e+01, 6.997894028534e+01, 7.997860717722e+01, 8.997827406910e+01, 9.777374826707e+01},
                                                       {4.303172000000e+00, 9.975620656674e+00, 1.997519460719e+01, 2.997476855770e+01, 3.997434250822e+01, 4.997391645874e+01, 5.997349040925e+01, 6.997306435977e+01, 7.997263831028e+01, 8.997221226080e+01, 9.715259600000e+01}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);
    snappingLine = std::vector{Point(100, 0), Point(100, 100)};
    CurvilinearGridSnapGridToLandBoundary snappingEast(grid, eastLandBoundary, snappingLine);

    // First snap the east boundary of the domain
    [[maybe_unused]] auto dummyUndoAction = snappingEast.Compute();

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, eastMappedPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping east: (" << i << ", " << j << ")";
        }
    }
    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, eastMappedPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping east: (" << i << ", " << j << ")";
        }
    }

    //--------------------------------

    CurvilinearGrid grid2(grid.GetNodes(), Projection::cartesian);
    snappingLine = std::vector{Point(0, 90.0), Point(0.0, 0.0)};
    CurvilinearGridSnapGridToLandBoundary snappingWest(grid2, westLandBoundary, snappingLine);

    // Next snap the west boundary of the domain
    dummyUndoAction = snappingWest.Compute();

    std::vector<std::vector<double>> westMappedPointsX{{-1.865916600000e+01, -1.865916600000e+01, -1.960069189347e+01, -2.370988900717e+01, -3.123906057660e+01, -3.191016458763e+01, -2.903003538732e+01, -1.992326360550e+01, -1.510684645043e+01, -1.465914200000e+01, 0.000000000000e+00},
                                                       {-4.588727360955e+00, -4.588727360955e+00, -5.324862328784e+00, -8.537650958466e+00, -1.442435732467e+01, -1.494906209700e+01, -1.269722406374e+01, -5.577066031841e+00, -1.811335198432e+00, -1.461296072050e+00, 1.000000000000e+01},
                                                       {1.407077477967e+01, 1.407077477967e+01, 1.377159103946e+01, 1.246583304568e+01, 1.007332772375e+01, 9.860074525424e+00, 1.077527806090e+01, 1.366908912001e+01, 1.519957671348e+01, 1.534184140627e+01, 2.000000000000e+01},
                                                       {2.976316730930e+01, 2.976316730930e+01, 2.975121693002e+01, 2.969906067561e+01, 2.960349617066e+01, 2.959497813890e+01, 2.963153436805e+01, 2.974712266737e+01, 2.980825535864e+01, 2.981393787680e+01, 3.000000000000e+01},
                                                       {4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01},
                                                       {5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01},
                                                       {6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01},
                                                       {7.004693591492e+01, 7.004740587316e+01, 7.004823433058e+01, 7.004906278800e+01, 7.004989124542e+01, 7.005071970284e+01, 7.005154816026e+01, 7.005237661767e+01, 7.005320507509e+01, 7.005403353251e+01, 7.005462842207e+01},
                                                       {8.117506417584e+01, 8.118682981612e+01, 8.120757066319e+01, 8.122831151026e+01, 8.124905235733e+01, 8.126979320440e+01, 8.129053405147e+01, 8.131127489854e+01, 8.133201574561e+01, 8.135275659268e+01, 8.136764995132e+01},
                                                       {9.289121938464e+01, 9.292016848203e+01, 9.297120087697e+01, 9.302223327191e+01, 9.307326566685e+01, 9.312429806180e+01, 9.317533045674e+01, 9.322636285168e+01, 9.327739524662e+01, 9.332842764156e+01, 9.336507242069e+01},
                                                       {1.036979060000e+02, 1.037349322601e+02, 1.038002033358e+02, 1.038654744116e+02, 1.039307454873e+02, 1.039960165631e+02, 1.040612876388e+02, 1.041265587146e+02, 1.041918297903e+02, 1.042571008661e+02, 1.043039700000e+02}};

    std::vector<std::vector<double>> westMappedPointsY{{7.939575000000e+00, 7.939575000000e+00, 9.737896215067e+00, 1.758649219919e+01, 3.789400601869e+01, 4.784876326869e+01, 6.665268923463e+01, 8.512964375544e+01, 9.147207654273e+01, 9.206163000000e+01, 1.000000000000e+02},
                                                       {6.207581573413e+00, 8.389050262338e+00, 1.197654202400e+01, 2.029446005791e+01, 3.835342201162e+01, 4.831804882587e+01, 6.520142590838e+01, 8.182915934273e+01, 8.896947896523e+01, 9.161189187069e+01, 1.000000000000e+02},
                                                       {2.522917065461e+00, 9.345269564857e+00, 1.673906515569e+01, 2.605542479630e+01, 3.933078934890e+01, 4.931641279775e+01, 6.211399013187e+01, 7.480766746645e+01, 8.364542153527e+01, 9.065511334167e+01, 1.000000000000e+02},
                                                       {1.007735774603e-01, 9.973847920281e+00, 1.986974757331e+01, 2.984244073645e+01, 3.997326953299e+01, 4.997269528641e+01, 6.008443969531e+01, 7.019203399766e+01, 8.014561008544e+01, 9.002616737426e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                       {5.461829340576e-02, 9.999690563583e+00, 1.999968515592e+01, 2.999967974826e+01, 3.999967434060e+01, 4.999966893294e+01, 5.999966352528e+01, 6.999965811762e+01, 7.999965270996e+01, 8.999964730229e+01, 9.996385913760e+01},
                                                       {1.367396375047e+00, 9.992253104062e+00, 1.999211772055e+01, 2.999198233705e+01, 3.999184695354e+01, 4.999171157003e+01, 5.999157618652e+01, 6.999144080301e+01, 7.999130541951e+01, 8.999117003600e+01, 9.909519537962e+01},
                                                       {3.364448501894e+00, 9.980938934087e+00, 1.998060582596e+01, 2.998027271784e+01, 3.997993960972e+01, 4.997960650159e+01, 5.997927339347e+01, 6.997894028534e+01, 7.997860717722e+01, 8.997827406910e+01, 9.777374826707e+01},
                                                       {4.303172000000e+00, 9.975620656674e+00, 1.997519460719e+01, 2.997476855770e+01, 3.997434250822e+01, 4.997391645874e+01, 5.997349040925e+01, 6.997306435977e+01, 7.997263831028e+01, 8.997221226080e+01, 9.715259600000e+01}};

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid2.GetNode(i, j).x, westMappedPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping east: (" << i << ", " << j << ")";
        }
    }
    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid2.GetNode(i, j).y, westMappedPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping east: (" << i << ", " << j << ")";
        }
    }

    //--------------------------------

    CurvilinearGrid grid3(grid2.GetNodes(), Projection::cartesian);
    snappingLine = std::vector{Point({0.0e+00, 1.0e+02}), Point({1.043040e+02, 9.715260e+01})};
    CurvilinearGridSnapGridToLandBoundary snappingNorth(grid3, northLandBoundary, snappingLine);

    // Finally snap the north boundary of the domain
    dummyUndoAction = snappingNorth.Compute();

    std::vector<std::vector<double>> northMappedPointsX{{-1.865916600000e+01, -1.865916600000e+01, -1.960069189347e+01, -2.370988900717e+01, -3.123906057660e+01, -3.191016458763e+01, -2.903003538732e+01, -1.984793400324e+01, -1.490230187035e+01, -1.444198867385e+01, 4.105750388196e-01},
                                                        {-4.588727360955e+00, -4.588727360955e+00, -5.324862328784e+00, -8.537650958466e+00, -1.442435732467e+01, -1.494906209700e+01, -1.269722406374e+01, -5.500065621084e+00, -1.615594343945e+00, -1.234667619608e+00, 1.035463931961e+01},
                                                        {1.407077477967e+01, 1.407077477967e+01, 1.377159103946e+01, 1.246583304568e+01, 1.007332772375e+01, 9.860074525424e+00, 1.077527806090e+01, 1.360324995584e+01, 1.496871325548e+01, 1.498477581044e+01, 1.954904702213e+01},
                                                        {2.976316730930e+01, 2.976316730930e+01, 2.975121693002e+01, 2.969906067561e+01, 2.960349617066e+01, 2.959497813890e+01, 2.963153436805e+01, 2.972109722207e+01, 2.959403127689e+01, 2.936444986349e+01, 2.944418867202e+01},
                                                        {4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 3.997143852191e+01, 3.974957636663e+01, 3.946628909227e+01, 3.933933032190e+01},
                                                        {5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.004471713130e+01, 5.039207447388e+01, 5.083560173828e+01, 5.103437408427e+01},
                                                        {6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.002623350990e+01, 6.023001228601e+01, 6.049020958726e+01, 6.060682029451e+01},
                                                        {7.004693591492e+01, 7.004740587316e+01, 7.004823433058e+01, 7.004906278800e+01, 7.004989124542e+01, 7.005071970284e+01, 7.005154816026e+01, 7.002081076203e+01, 6.977948712203e+01, 6.947217431998e+01, 6.933549472012e+01},
                                                        {8.117506417584e+01, 8.118682981612e+01, 8.120757066319e+01, 8.122831151026e+01, 8.124905235733e+01, 8.126979320440e+01, 8.129053405147e+01, 8.120853925106e+01, 8.062962863928e+01, 7.994612647662e+01, 7.969073249184e+01},
                                                        {9.289121938464e+01, 9.292016848203e+01, 9.297120087697e+01, 9.302223327191e+01, 9.307326566685e+01, 9.312429806180e+01, 9.317533045674e+01, 9.342912397007e+01, 9.432186094548e+01, 9.525175271030e+01, 9.555068079785e+01},
                                                        {1.036979060000e+02, 1.037349322601e+02, 1.038002033358e+02, 1.038654744116e+02, 1.039307454873e+02, 1.039960165631e+02, 1.040612876388e+02, 1.036075851093e+02, 1.017966517185e+02, 1.000067755692e+02, 9.956840500000e+01}};

    std::vector<std::vector<double>> northMappedPointsY{{7.939575000000e+00, 7.939575000000e+00, 9.737896215067e+00, 1.758649219919e+01, 3.789400601869e+01, 4.784876326869e+01, 6.665268923463e+01, 8.613403524137e+01, 9.419932889185e+01, 9.495699842595e+01, 1.054743163503e+02},
                                                        {6.207581573413e+00, 8.389050262338e+00, 1.197654202400e+01, 2.029446005791e+01, 3.835342201162e+01, 4.831804882587e+01, 6.520142590838e+01, 8.285582820404e+01, 9.157934868169e+01, 9.463359490996e+01, 1.047285091450e+02},
                                                        {2.522917065461e+00, 9.345269564857e+00, 1.673906515569e+01, 2.605542479630e+01, 3.933078934890e+01, 4.931641279775e+01, 6.211399013187e+01, 7.544724589347e+01, 8.588808802705e+01, 9.412373957683e+01, 1.043806722017e+02},
                                                        {1.007735774603e-01, 9.973847920281e+00, 1.986974757331e+01, 2.984244073645e+01, 3.997326953299e+01, 4.997269528641e+01, 6.008443969531e+01, 7.044485180870e+01, 8.222663743403e+01, 9.439260853671e+01, 1.053992929494e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.027745348015e+01, 8.243267902243e+01, 9.518460383235e+01, 1.064179136971e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.021158750721e+01, 8.185517402742e+01, 9.395380659904e+01, 1.048943352951e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.012412878028e+01, 8.108834634086e+01, 9.231951875183e+01, 1.028712842195e+02},
                                                        {5.461829340576e-02, 9.999690563583e+00, 1.999968515592e+01, 2.999967974826e+01, 3.999967434060e+01, 4.999966893294e+01, 5.999966352528e+01, 7.011874689536e+01, 8.103231080865e+01, 9.219483260677e+01, 1.026769411005e+02},
                                                        {1.367396375047e+00, 9.992253104062e+00, 1.999211772055e+01, 2.999198233705e+01, 3.999184695354e+01, 4.999171157003e+01, 5.999157618652e+01, 7.037903247251e+01, 8.264120735569e+01, 9.529797569125e+01, 1.054217164428e+02},
                                                        {3.364448501894e+00, 9.980938934087e+00, 1.998060582596e+01, 2.998027271784e+01, 3.997993960972e+01, 4.997960650159e+01, 5.997927339347e+01, 7.049505766060e+01, 8.263723768445e+01, 9.487399319961e+01, 1.033370952633e+02},
                                                        {4.303172000000e+00, 9.975620656674e+00, 1.997519460719e+01, 2.997476855770e+01, 3.997434250822e+01, 4.997391645874e+01, 5.997349040925e+01, 7.047785003180e+01, 8.230233592963e+01, 9.410634025831e+01, 1.017586980000e+02}};

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid3.GetNode(i, j).x, northMappedPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping east: (" << i << ", " << j << ")";
        }
    }
    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid3.GetNode(i, j).y, northMappedPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping east: (" << i << ", " << j << ")";
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnappingLineToLandBoundaryNorthTheWest)
{

    // Tests snapping of a non-square grid

    std::vector<Point> northLandBoundaryPoints{{-10.614098, 100.910210},
                                               {-1.765560, 105.637527},
                                               {17.628498, 104.182968},
                                               {42.355930, 106.728447},
                                               {65.871231, 101.758698},
                                               {85.992554, 107.092087},
                                               {99.568405, 101.758698}};

    LandBoundary northLandBoundary(northLandBoundaryPoints);

    lin_alg::Matrix<Point> gridPoints(6, 11);

    gridPoints << Point{0.0e+00, 0.0e+00}, Point{0.0e+00, 1.0e+01}, Point{0.0e+00, 2.0e+01}, Point{0.0e+00, 3.0e+01}, Point{0.0e+00, 4.0e+01}, Point{0.0e+00, 5.0e+01}, Point{0.0e+00, 6.0e+01}, Point{0.0e+00, 7.0e+01}, Point{0.0e+00, 8.0e+01}, Point{0.0e+00, 9.0e+01}, Point{0.0e+00, 1.0e+02},
        Point{1.0e+01, 0.0e+00}, Point{1.0e+01, 1.0e+01}, Point{1.0e+01, 2.0e+01}, Point{1.0e+01, 3.0e+01}, Point{1.0e+01, 4.0e+01}, Point{1.0e+01, 5.0e+01}, Point{1.0e+01, 6.0e+01}, Point{1.0e+01, 7.0e+01}, Point{1.0e+01, 8.0e+01}, Point{1.0e+01, 9.0e+01}, Point{1.0e+01, 1.0e+02},
        Point{2.0e+01, 0.0e+00}, Point{2.0e+01, 1.0e+01}, Point{2.0e+01, 2.0e+01}, Point{2.0e+01, 3.0e+01}, Point{2.0e+01, 4.0e+01}, Point{2.0e+01, 5.0e+01}, Point{2.0e+01, 6.0e+01}, Point{2.0e+01, 7.0e+01}, Point{2.0e+01, 8.0e+01}, Point{2.0e+01, 9.0e+01}, Point{2.0e+01, 1.0e+02},
        Point{3.0e+01, 0.0e+00}, Point{3.0e+01, 1.0e+01}, Point{3.0e+01, 2.0e+01}, Point{3.0e+01, 3.0e+01}, Point{3.0e+01, 4.0e+01}, Point{3.0e+01, 5.0e+01}, Point{3.0e+01, 6.0e+01}, Point{3.0e+01, 7.0e+01}, Point{3.0e+01, 8.0e+01}, Point{3.0e+01, 9.0e+01}, Point{3.0e+01, 1.0e+02},
        Point{4.0e+01, 0.0e+00}, Point{4.0e+01, 1.0e+01}, Point{4.0e+01, 2.0e+01}, Point{4.0e+01, 3.0e+01}, Point{4.0e+01, 4.0e+01}, Point{4.0e+01, 5.0e+01}, Point{4.0e+01, 6.0e+01}, Point{4.0e+01, 7.0e+01}, Point{4.0e+01, 8.0e+01}, Point{4.0e+01, 9.0e+01}, Point{4.0e+01, 1.0e+02},
        Point{5.0e+01, 0.0e+00}, Point{5.0e+01, 1.0e+01}, Point{5.0e+01, 2.0e+01}, Point{5.0e+01, 3.0e+01}, Point{5.0e+01, 4.0e+01}, Point{5.0e+01, 5.0e+01}, Point{5.0e+01, 6.0e+01}, Point{5.0e+01, 7.0e+01}, Point{5.0e+01, 8.0e+01}, Point{5.0e+01, 9.0e+01}, Point{5.0e+01, 1.0e+02};

    std::vector<std::vector<double>> northMappedPointsX{{0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 1.774961128485e-02, 1.556264747728e-01, 3.316761521277e-01, 4.105750388196e-01},
                                                        {1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.001533144852e+01, 1.013442431202e+01, 1.028648942044e+01, 1.035463931961e+01},
                                                        {2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 1.998050480592e+01, 1.982906846350e+01, 1.963570520770e+01, 1.954904702213e+01},
                                                        {3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 2.997597166392e+01, 2.978932241507e+01, 2.955099714999e+01, 2.944418867202e+01},
                                                        {4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 3.997143852191e+01, 3.974957636663e+01, 3.946628909227e+01, 3.933933032190e+01},
                                                        {5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.004471713130e+01, 5.039207447388e+01, 5.083560173828e+01, 5.103437408427e+01}};

    std::vector<std::vector<double>> northMappedPointsY{{0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.023666072723e+01, 8.207501303012e+01, 9.442233455747e+01, 1.054743163503e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.020441866004e+01, 8.179231843049e+01, 9.381984672774e+01, 1.047285091450e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.018938128575e+01, 8.166047252617e+01, 9.353885249278e+01, 1.043806722017e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.023341738295e+01, 8.204657577430e+01, 9.436172816257e+01, 1.053992929494e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.027745348015e+01, 8.243267902243e+01, 9.518460383235e+01, 1.064179136971e+02},
                                                        {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.021158750721e+01, 8.185517402742e+01, 9.395380659904e+01, 1.048943352951e+02}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);

    std::vector<Point> snappingLine{Point(50.0, 100.0), Point(0.0, 100.0)};
    CurvilinearGridSnapGridToLandBoundary snappingNorth(grid, northLandBoundary, snappingLine);

    [[maybe_unused]] auto dummyUndoAction = snappingNorth.Compute();

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, northMappedPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping north: (" << i << ", " << j << ")";
        }
    }
    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, northMappedPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping north: (" << i << ", " << j << ")";
        }
    }

    //--------------------------------
    // Next snap the grid to the west boundary

    LandBoundary westLandBoundary({{-14.659142, 92.061630}, {-26.901642, 75.940262}, {-32.235008, 52.667297}, {-30.780455, 31.091324}, {-18.659166, 7.939575}});

    std::vector<std::vector<double>> westMappedPointsX{{-1.865916600000e+01, -1.865916600000e+01, -1.960069189347e+01, -2.370988900717e+01, -3.123906057660e+01, -3.191016458763e+01, -2.903003538732e+01, -1.980278588722e+01, -1.465914200000e+01, -1.465914200000e+01, 4.105750388196e-01},
                                                       {-5.031129819183e+00, -5.031129819183e+00, -5.789588044642e+00, -9.099804335584e+00, -1.516502479029e+01, -1.570564120970e+01, -1.338551629597e+01, -5.953049484962e+00, -1.809006104373e+00, -1.804156632664e+00, 1.035463931961e+01},
                                                       {1.303127778994e+01, 1.303127778994e+01, 1.267964190197e+01, 1.114496167073e+01, 8.333008277997e+00, 8.082368060372e+00, 9.158022798963e+00, 1.254546156534e+01, 1.408447284961e+01, 1.358614071905e+01, 1.954904702213e+01},
                                                       {2.925752865685e+01, 2.925752865685e+01, 2.922006417453e+01, 2.905655412803e+01, 2.875695905888e+01, 2.873025499845e+01, 2.884485890925e+01, 2.917243879471e+01, 2.909915143577e+01, 2.872823461615e+01, 2.944418867202e+01},
                                                       {4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 4.000000000000e+01, 3.997143852191e+01, 3.974957636663e+01, 3.946628909227e+01, 3.933933032190e+01},
                                                       {5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.000000000000e+01, 5.004471713130e+01, 5.039207447388e+01, 5.083560173828e+01, 5.103437408427e+01}};

    std::vector<std::vector<double>> westMappedPointsY{{7.939575000000e+00, 7.939575000000e+00, 9.737896215067e+00, 1.758649219919e+01, 3.789400601869e+01, 4.784876326869e+01, 6.665268923463e+01, 8.528829318425e+01, 9.206163000000e+01, 9.206163000000e+01, 1.054743163503e+02},
                                                       {6.395826187202e+00, 8.340198288729e+00, 1.173323104531e+01, 2.000014002419e+01, 3.830348961302e+01, 4.826704373710e+01, 6.535915889984e+01, 8.233074091620e+01, 8.984336999285e+01, 9.191585169887e+01, 1.047285091450e+02},
                                                       {2.965228598155e+00, 9.230483856585e+00, 1.616736618518e+01, 2.536387170165e+01, 3.921346500525e+01, 4.919656799299e+01, 6.248460961363e+01, 7.583552228773e+01, 8.553289727182e+01, 9.258618704690e+01, 1.043806722017e+02},
                                                       {3.159255303435e-01, 9.918013135356e+00, 1.959165817053e+01, 2.950605113808e+01, 3.991619988911e+01, 4.991439962401e+01, 6.026471875065e+01, 7.084361691138e+01, 8.251181917150e+01, 9.423216223470e+01, 1.053992929494e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.027745348015e+01, 8.243267902243e+01, 9.518460383235e+01, 1.064179136971e+02},
                                                       {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.021158750721e+01, 8.185517402742e+01, 9.395380659904e+01, 1.048943352951e+02}};

    CurvilinearGrid grid2(grid.GetNodes(), Projection::cartesian);
    snappingLine = std::vector{Point(0.0, 90.0), Point(0.0, 0.0)};
    CurvilinearGridSnapGridToLandBoundary snappingWest(grid2, westLandBoundary, snappingLine);
    dummyUndoAction = snappingWest.Compute();

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid2.GetNode(i, j).x, westMappedPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping west: (" << i << ", " << j << ")";
        }
    }

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid2.GetNode(i, j).y, westMappedPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping west: (" << i << ", " << j << ")";
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapBoundaryRegionToEastOnePoint)
{

    // Tests snapping of a partial grid line (from node (10,1) to (10,9))
    // Region is defined by a single point to the left of the grid line to be snapped at (3,50)

    std::vector<Point> snappingLine{Point(100, 0), Point(100, 100), Point(30.0, 50.0)};

    LandBoundary eastLandBoundary({{104.303970, 97.152596}, {103.697906, 4.303172}});

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    std::vector<std::vector<double>> eastMappedGridPointsX{{0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00},
                                                           {1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01},
                                                           {2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01},
                                                           {3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01},
                                                           {4.018310390879e+01, 4.018493728501e+01, 4.018816921927e+01, 4.019140115354e+01, 4.019463308780e+01, 4.019786502206e+01, 4.020109695632e+01, 4.020432889059e+01, 4.020756082485e+01, 4.021079275911e+01, 4.021311351081e+01},
                                                           {5.069614966038e+01, 5.070312004265e+01, 5.071540765548e+01, 5.072769526831e+01, 5.073998288114e+01, 5.075227049397e+01, 5.076455810680e+01, 5.077684571963e+01, 5.078913333246e+01, 5.080142094529e+01, 5.081024429875e+01},
                                                           {6.143752225160e+01, 6.145191582266e+01, 6.147728927016e+01, 6.150266271767e+01, 6.152803616517e+01, 6.155340961268e+01, 6.157878306018e+01, 6.160415650769e+01, 6.162952995519e+01, 6.165490340270e+01, 6.167312328794e+01},
                                                           {7.226038374840e+01, 7.228301643744e+01, 7.232291406568e+01, 7.236281169392e+01, 7.240270932216e+01, 7.244260695040e+01, 7.248250457864e+01, 7.252240220688e+01, 7.256229983512e+01, 7.260219746336e+01, 7.263084671206e+01},
                                                           {8.300175633962e+01, 8.303181221745e+01, 8.308479568036e+01, 8.313777914328e+01, 8.319076260619e+01, 8.324374606910e+01, 8.329672953202e+01, 8.334971299493e+01, 8.340269645785e+01, 8.345567992076e+01, 8.349372570125e+01},
                                                           {9.351480209121e+01, 9.354999497508e+01, 9.361203411656e+01, 9.367407325805e+01, 9.373611239953e+01, 9.379815154101e+01, 9.386019068249e+01, 9.392222982398e+01, 9.398426896546e+01, 9.404630810694e+01, 9.409085648919e+01},
                                                           {1.036979060000e+02, 1.037349322601e+02, 1.038002033358e+02, 1.038654744116e+02, 1.039307454873e+02, 1.039960165631e+02, 1.040612876388e+02, 1.041265587146e+02, 1.041918297903e+02, 1.042571008661e+02, 1.043039700000e+02}};

    std::vector<std::vector<double>> eastMappedGridPointsY{{0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                           {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                           {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                           {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                           {2.130739973853e-01, 9.998792843015e+00, 1.999877174693e+01, 2.999875065085e+01, 3.999872955477e+01, 4.999870845869e+01, 5.999868736261e+01, 6.999866626653e+01, 7.999864517045e+01, 8.999862407436e+01, 9.985900917917e+01},
                                                           {8.100940711780e-01, 9.995410464307e+00, 1.999533025832e+01, 2.999525005233e+01, 3.999516984634e+01, 4.999508964036e+01, 5.999500943437e+01, 6.999492922838e+01, 7.999484902239e+01, 8.999476881640e+01, 9.946396167789e+01},
                                                           {1.672813073793e+00, 9.990522785460e+00, 1.999035716318e+01, 2.999019154090e+01, 3.999002591863e+01, 4.998986029635e+01, 5.998969467407e+01, 6.998952905179e+01, 7.998936342952e+01, 8.998919780724e+01, 9.889310149872e+01},
                                                           {2.630358926207e+00, 9.985097871214e+00, 1.998483744401e+01, 2.998457701680e+01, 3.998431658959e+01, 4.998405616239e+01, 5.998379573518e+01, 6.998353530797e+01, 7.998327488077e+01, 8.998301445356e+01, 9.825949450128e+01},
                                                           {3.493077928822e+00, 9.980210192367e+00, 1.997986434887e+01, 2.997951850537e+01, 3.997917266188e+01, 4.997882681838e+01, 5.997848097488e+01, 6.997813513139e+01, 7.997778928789e+01, 8.997744344439e+01, 9.768863432211e+01},
                                                           {4.090098002615e+00, 9.976827813659e+00, 1.997642286026e+01, 2.997601790685e+01, 3.997561295345e+01, 4.997520800005e+01, 5.997480304664e+01, 6.997439809324e+01, 7.997399313984e+01, 8.997358818643e+01, 9.729358682083e+01},
                                                           {4.303172000000e+00, 9.975620656674e+00, 1.997519460719e+01, 2.997476855770e+01, 3.997434250822e+01, 4.997391645874e+01, 5.997349040925e+01, 6.997306435977e+01, 7.997263831028e+01, 8.997221226080e+01, 9.715259600000e+01}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);
    CurvilinearGridSnapGridToLandBoundary snapping(grid, eastLandBoundary, snappingLine);

    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, eastMappedGridPointsX[i][j], snapping::tolerance) << "Difference in x-points after snapping east: (" << i << ", " << j << ")";
        }
    }
    for (UInt i = 0; i < gridPoints.rows(); ++i)
    {
        for (UInt j = 0; j < gridPoints.cols(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, eastMappedGridPointsY[i][j], snapping::tolerance) << "Difference in y-points after snapping east: (" << i << ", " << j << ")";
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapBoundaryRegionToEastTwoPoints)
{
    // Tests snapping of a partial grid line (from node (10,1) to (10,9))
    // Region is defined by points to the left of the grid line to be snapped (bounded by (3,0) (3,10))

    std::vector<Point> eastLandBoundaryPoints{{104.303970, 97.152596},
                                              {103.697906, 4.303172}};

    std::vector<Point> snappingLine{Point(100, 10), Point(100, 90), Point(30.0, 0.0), Point(30.0, 100.0)};

    LandBoundary eastLandBoundary(eastLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    // Data obtained from interactor
    std::vector<std::vector<double>> mappedPointsX{{0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00},
                                                   {1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01},
                                                   {2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01, 2.000000000000e+01},
                                                   {3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01, 3.000000000000e+01},
                                                   {4.000000000000e+01, 4.018493728501e+01, 4.018816921927e+01, 4.019140115354e+01, 4.019463308780e+01, 4.019786502206e+01, 4.020109695632e+01, 4.020432889059e+01, 4.020756082485e+01, 4.021079275911e+01, 4.000000000000e+01},
                                                   {5.000000000000e+01, 5.070312004265e+01, 5.071540765548e+01, 5.072769526831e+01, 5.073998288114e+01, 5.075227049397e+01, 5.076455810680e+01, 5.077684571963e+01, 5.078913333246e+01, 5.080142094529e+01, 5.000000000000e+01},
                                                   {6.000000000000e+01, 6.145191582266e+01, 6.147728927016e+01, 6.150266271767e+01, 6.152803616517e+01, 6.155340961268e+01, 6.157878306018e+01, 6.160415650769e+01, 6.162952995519e+01, 6.165490340270e+01, 6.000000000000e+01},
                                                   {7.000000000000e+01, 7.228301643744e+01, 7.232291406568e+01, 7.236281169392e+01, 7.240270932216e+01, 7.244260695040e+01, 7.248250457864e+01, 7.252240220688e+01, 7.256229983512e+01, 7.260219746336e+01, 7.000000000000e+01},
                                                   {8.000000000000e+01, 8.303181221745e+01, 8.308479568036e+01, 8.313777914328e+01, 8.319076260619e+01, 8.324374606910e+01, 8.329672953202e+01, 8.334971299493e+01, 8.340269645785e+01, 8.345567992076e+01, 8.000000000000e+01},
                                                   {9.000000000000e+01, 9.354999497508e+01, 9.361203411656e+01, 9.367407325805e+01, 9.373611239953e+01, 9.379815154101e+01, 9.386019068249e+01, 9.392222982398e+01, 9.398426896546e+01, 9.404630810694e+01, 9.000000000000e+01},
                                                   {1.000000000000e+02, 1.037349322601e+02, 1.038002033358e+02, 1.038654744116e+02, 1.039307454873e+02, 1.039960165631e+02, 1.040612876388e+02, 1.041265587146e+02, 1.041918297903e+02, 1.042571008661e+02, 1.000000000000e+02}};

    std::vector<std::vector<double>> mappedPointsY{{0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.998792843015e+00, 1.999877174693e+01, 2.999875065085e+01, 3.999872955477e+01, 4.999870845869e+01, 5.999868736261e+01, 6.999866626653e+01, 7.999864517045e+01, 8.999862407436e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.995410464307e+00, 1.999533025832e+01, 2.999525005233e+01, 3.999516984634e+01, 4.999508964036e+01, 5.999500943437e+01, 6.999492922838e+01, 7.999484902239e+01, 8.999476881640e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.990522785460e+00, 1.999035716318e+01, 2.999019154090e+01, 3.999002591863e+01, 4.998986029635e+01, 5.998969467407e+01, 6.998952905179e+01, 7.998936342952e+01, 8.998919780724e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.985097871214e+00, 1.998483744401e+01, 2.998457701680e+01, 3.998431658959e+01, 4.998405616239e+01, 5.998379573518e+01, 6.998353530797e+01, 7.998327488077e+01, 8.998301445356e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.980210192367e+00, 1.997986434887e+01, 2.997951850537e+01, 3.997917266188e+01, 4.997882681838e+01, 5.997848097488e+01, 6.997813513139e+01, 7.997778928789e+01, 8.997744344439e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.976827813659e+00, 1.997642286026e+01, 2.997601790685e+01, 3.997561295345e+01, 4.997520800005e+01, 5.997480304664e+01, 6.997439809324e+01, 7.997399313984e+01, 8.997358818643e+01, 1.000000000000e+02},
                                                   {0.000000000000e+00, 9.975620656674e+00, 1.997519460719e+01, 2.997476855770e+01, 3.997434250822e+01, 4.997391645874e+01, 5.997349040925e+01, 6.997306435977e+01, 7.997263831028e+01, 8.997221226080e+01, 1.000000000000e+02}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);

    CurvilinearGridSnapGridToLandBoundary snapping(grid, eastLandBoundary, snappingLine);

    // Compute snapping to land boundary
    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    // Check results
    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, mappedPointsX[i][j], snapping::tolerance);
        }
    }

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, mappedPointsY[i][j], snapping::tolerance);
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapPartialBoundaryRegionToWest)
{

    // Tests snapping of partial region to a land boundary.
    // The region is defined by first the grid line {(0,1), (0,9)} in combination with a single point {(6,2)} to define the region

    std::vector<Point> westLandBoundaryPoints{{-14.659142, 92.061630},
                                              {-26.901642, 75.940262},
                                              {-32.235008, 52.667297},
                                              {-30.780455, 31.091324},
                                              {-18.659166, 7.939575}};

    std::vector<Point> snappingLine{Point(0.0, 10.0), Point(0.0, 90.0), Point(60.0, 20.0)};

    LandBoundary westLandBoundary(westLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    // Data obtained from interactor
    std::vector<std::vector<double>> mappedPointsX{{{0.000000000000e+00, -1.865916600000e+01, -1.960069189347e+01, -2.370988900717e+01, -3.123906057660e+01, -3.191016458763e+01, -2.903003538732e+01, -1.992326360550e+01, -1.510684645043e+01, -1.465914200000e+01, 0.000000000000e+00},
                                                    {1.000000000000e+01, -7.409238884715e+00, -8.287694502485e+00, -1.212162760414e+01, -1.914644031315e+01, -1.977258887973e+01, -1.708539175275e+01, -8.588658007079e+00, -4.094879623790e+00, -3.677165684842e+00, 1.000000000000e+01},
                                                    {2.000000000000e+01, 6.005625500000e+00, 5.299481079896e+00, 2.217583244623e+00, -3.429295432449e+00, -3.932623440724e+00, -1.772526540490e+00, 5.057552295874e+00, 8.669865162174e+00, 9.005643500000e+00, 2.000000000000e+01},
                                                    {3.000000000000e+01, 2.067041700000e+01, 2.019965405326e+01, 1.814505549642e+01, 1.438046971170e+01, 1.404491770618e+01, 1.548498230634e+01, 2.003836819725e+01, 2.244657677478e+01, 2.267042900000e+01, 3.000000000000e+01},
                                                    {4.000000000000e+01, 3.533520850000e+01, 3.509982702663e+01, 3.407252774821e+01, 3.219023485585e+01, 3.202245885309e+01, 3.274249115317e+01, 3.501918409862e+01, 3.622328838739e+01, 3.633521450000e+01, 4.000000000000e+01},
                                                    {5.000000000000e+01, 4.875007288472e+01, 4.868700260901e+01, 4.841173859697e+01, 4.790737973655e+01, 4.786242429210e+01, 4.805535636543e+01, 4.866539440158e+01, 4.898803317336e+01, 4.901802368484e+01, 5.000000000000e+01},
                                                    {6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01, 6.000000000000e+01},
                                                    {7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01, 7.000000000000e+01},
                                                    {8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01, 8.000000000000e+01},
                                                    {9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01, 9.000000000000e+01},
                                                    {1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02}}};

    std::vector<std::vector<double>> mappedPointsY{{{0.000000000000e+00, 7.939575000000e+00, 9.737896215067e+00, 1.758649219919e+01, 3.789400601869e+01, 4.784876326869e+01, 6.665268923463e+01, 8.512964375544e+01, 9.147207654273e+01, 9.206163000000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 8.077597303704e+00, 1.042532682052e+01, 1.841803954681e+01, 3.803508086533e+01, 4.799286880491e+01, 6.620704355766e+01, 8.411614979893e+01, 9.070359313144e+01, 9.192352697660e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 8.454681250000e+00, 1.230342216130e+01, 2.068986914940e+01, 3.842050451402e+01, 4.838657245151e+01, 6.498951692598e+01, 8.134723281658e+01, 8.860405740704e+01, 9.154622250000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 8.969787500000e+00, 1.486894810753e+01, 2.379324609960e+01, 3.894700300935e+01, 4.892438163434e+01, 6.332634461732e+01, 7.756482187772e+01, 8.573603827136e+01, 9.103081500000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 9.484893750000e+00, 1.743447405377e+01, 2.689662304980e+01, 3.947350150467e+01, 4.946219081717e+01, 6.166317230866e+01, 7.378241093886e+01, 8.286801913568e+01, 9.051540750000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 9.861977696296e+00, 1.931256939455e+01, 2.916845265238e+01, 3.985892515336e+01, 4.985589446378e+01, 6.044564567698e+01, 7.101349395651e+01, 8.076848341128e+01, 9.013810302340e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                    {0.000000000000e+00, 1.000000000000e+01, 2.000000000000e+01, 3.000000000000e+01, 4.000000000000e+01, 5.000000000000e+01, 6.000000000000e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02}}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);

    CurvilinearGridSnapGridToLandBoundary snapping(grid, westLandBoundary, snappingLine);

    // Compute snapping to land boundary
    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, mappedPointsX[i][j], snapping::tolerance);
        }
    }

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, mappedPointsY[i][j], snapping::tolerance);
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapPartialBoundaryRegionToNorthTwoPoints)
{
    // Tests snapping of partial line section to a land boundary.
    // The line section is defined by first the grid line {(0,10), (9,10)}

    std::vector<Point> northLandBoundaryPoints{{-10.614098, 100.910210},
                                               {-1.765560, 105.637527},
                                               {17.628498, 104.182968},
                                               {42.355930, 106.728447},
                                               {65.871231, 101.758698},
                                               {85.992554, 107.092087},
                                               {99.568405, 101.758698}};

    std::vector<Point> snappingLine{Point(0.0, 100.0), Point(90.0, 100.0)};

    LandBoundary northLandBoundary(northLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    // Data obtained from interactor
    std::vector<std::vector<double>> mappedPointsX{{0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 1.774961128485e-02, 1.556264747728e-01, 3.316761521277e-01, 4.105750388196e-01},
                                                   {1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.001533144852e+01, 1.013442431202e+01, 1.028648942044e+01, 1.035463931961e+01},
                                                   {2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 1.998050480592e+01, 1.982906846350e+01, 1.963570520770e+01, 1.954904702213e+01},
                                                   {3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 2.997597166392e+01, 2.978932241507e+01, 2.955099714999e+01, 2.944418867202e+01},
                                                   {4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 3.997143852191e+01, 3.974957636663e+01, 3.946628909227e+01, 3.933933032190e+01},
                                                   {5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.004471713130e+01, 5.039207447388e+01, 5.083560173828e+01, 5.103437408427e+01},
                                                   {6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.002623350990e+01, 6.023001228601e+01, 6.049020958726e+01, 6.060682029451e+01},
                                                   {7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 6.996945303784e+01, 6.973216787907e+01, 6.942918756326e+01, 6.929340310761e+01},
                                                   {8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 7.994107375410e+01, 7.948334170402e+01, 7.889888121011e+01, 7.863694785711e+01},
                                                   {9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.008118201565e+01, 9.071179423073e+01, 9.151699877479e+01, 9.187786136221e+01},
                                                   {1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02, 1.000000000000e+02}};

    std::vector<std::vector<double>> mappedPointsY{{0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.023666072723e+01, 8.207501303012e+01, 9.442233455747e+01, 1.054743163503e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.020441866004e+01, 8.179231843049e+01, 9.381984672774e+01, 1.047285091450e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.018938128575e+01, 8.166047252617e+01, 9.353885249278e+01, 1.043806722017e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.023341738295e+01, 8.204657577430e+01, 9.436172816257e+01, 1.053992929494e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.027745348015e+01, 8.243267902243e+01, 9.518460383235e+01, 1.064179136971e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.021158750721e+01, 8.185517402742e+01, 9.395380659904e+01, 1.048943352951e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.012412878028e+01, 8.108834634086e+01, 9.231951875183e+01, 1.028712842195e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.011524478944e+01, 8.101045256871e+01, 9.215350903750e+01, 1.026657842326e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.022231155967e+01, 8.194920124036e+01, 9.415420042167e+01, 1.051423986574e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.020664439596e+01, 8.181183341756e+01, 9.386143769632e+01, 1.047799937436e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);
    CurvilinearGridSnapGridToLandBoundary snapping(grid, northLandBoundary, snappingLine);

    // Compute snapping to land boundary
    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, mappedPointsX[i][j], snapping::tolerance);
        }
    }

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, mappedPointsY[i][j], snapping::tolerance);
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapPartialBoundaryRegionToNorthFourPoints)
{
    // Test smoothing with a 10x10 grid, and a boundary defined on the north of the grid
    // the snapping line is defined by a large section (2,10) to (10,10) along the north boundary
    // the region used in the snapping is defined by (0,6) to (9,6).

    std::vector<Point> northLandBoundaryPoints{{-10.614098, 100.910210},
                                               {-1.765560, 105.637527},
                                               {17.628498, 104.182968},
                                               {42.355930, 106.728447},
                                               {65.871231, 101.758698},
                                               {85.992554, 107.092087},
                                               {99.568405, 101.758698}};

    std::vector<Point> snappingLine{Point(20.0, 100.0), Point(100.0, 100.0), Point(0.0, 60.0), Point(90.0, 60.0)};

    LandBoundary northLandBoundary(northLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    // Data obtained from interactor
    std::vector<std::vector<double>> mappedPointsX{{0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00},
                                                   {1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01, 1.000000000000e+01},
                                                   {2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 1.993395946539e+01, 1.977452351107e+01, 1.961508755674e+01, 1.954904702213e+01},
                                                   {3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 2.991860331555e+01, 2.972209433601e+01, 2.952558535647e+01, 2.944418867202e+01},
                                                   {4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 3.990324716570e+01, 3.966966516095e+01, 3.943608315620e+01, 3.933933032190e+01},
                                                   {5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.015148057750e+01, 5.051718704214e+01, 5.088289350677e+01, 5.103437408427e+01},
                                                   {6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.008886677465e+01, 6.030341014726e+01, 6.051795351986e+01, 6.060682029451e+01},
                                                   {7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 6.989652128089e+01, 6.964670155381e+01, 6.939688182672e+01, 6.929340310761e+01},
                                                   {8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 7.980038563523e+01, 7.931847392855e+01, 7.883656222188e+01, 7.863694785711e+01},
                                                   {9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.027500642943e+01, 9.093893068111e+01, 9.160285493278e+01, 9.187786136221e+01},
                                                   {1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 9.993679437561e+01, 9.978420250000e+01, 9.963161062439e+01, 9.956840500000e+01}};

    std::vector<std::vector<double>> mappedPointsY{{0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.000000000000e+01, 8.000000000000e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.064153459087e+01, 8.219033610086e+01, 9.373913761086e+01, 1.043806722017e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.079070814563e+01, 8.269964647470e+01, 9.460858480376e+01, 1.053992929494e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.093988170040e+01, 8.320895684853e+01, 9.547803199667e+01, 1.064179136971e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.071675880926e+01, 8.244716764753e+01, 9.417757648580e+01, 1.048943352951e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.042048983858e+01, 8.143564210973e+01, 9.245079438088e+01, 1.028712842195e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.039039506227e+01, 8.133289211630e+01, 9.227538917032e+01, 1.026657842326e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.075308684759e+01, 8.257119932870e+01, 9.438931180980e+01, 1.051423986574e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.070001387673e+01, 8.238999687179e+01, 9.407997986685e+01, 1.047799937436e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.025755535907e+01, 8.087934900000e+01, 9.150114264093e+01, 1.017586980000e+02}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);
    CurvilinearGridSnapGridToLandBoundary snapping(grid, northLandBoundary, snappingLine);

    // Compute snapping to land boundary
    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, mappedPointsX[i][j], snapping::tolerance) << "Difference in x-points: (" << i << ", " << j << ")";
        }
    }

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, mappedPointsY[i][j], snapping::tolerance) << "Difference in y-points: (" << i << ", " << j << ")";
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, SnapPartialOffsetBoundaryRegionToNorthFourPoints)
{
    // Test smoothing with a 10x10 grid, and a boundary defined on the north of the grid
    // the snapping line is defined by a small section (0,10) to (4,10) along the north boundary
    // the region used in the snapping is defined outside of this (6,8) to (9,8), this should
    // not be taken into account in the snapping.

    std::vector<Point> northLandBoundaryPoints{{-10.614098, 100.910210},
                                               {-1.765560, 105.637527},
                                               {17.628498, 104.182968},
                                               {42.355930, 106.728447},
                                               {65.871231, 101.758698},
                                               {85.992554, 107.092087},
                                               {99.568405, 101.758698}};

    std::vector<Point> snappingLine{Point(0.0, 100.0), Point(40.0, 100.0), Point(60.0, 80.0), Point(90.0, 80.0)};

    LandBoundary northLandBoundary(northLandBoundaryPoints);

    lin_alg::Matrix<Point> const gridPoints(snapping::GetGridPoints10x10());

    // Data obtained from interactor
    std::vector<std::vector<double>> mappedPointsX{{0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 2.052875194098e-01, 4.105750388196e-01},
                                                   {1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.0e+01, 1.017731965980e+01, 1.035463931961e+01},
                                                   {2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 2.0e+01, 1.977452351107e+01, 1.954904702213e+01},
                                                   {3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 3.0e+01, 2.972209433601e+01, 2.944418867202e+01},
                                                   {4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 4.0e+01, 3.966966516095e+01, 3.933933032190e+01},
                                                   {5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.0e+01, 5.000000000000e+01, 5.000000000000e+01},
                                                   {6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.0e+01, 6.000000000000e+01, 6.000000000000e+01},
                                                   {7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.0e+01, 7.000000000000e+01, 7.000000000000e+01},
                                                   {8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.0e+01, 8.000000000000e+01, 8.000000000000e+01},
                                                   {9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.0e+01, 9.000000000000e+01, 9.000000000000e+01},
                                                   {1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.0e+02, 1.000000000000e+02, 1.000000000000e+02}};

    std::vector<std::vector<double>> mappedPointsY{{0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.273715817516e+01, 1.054743163503e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.236425457252e+01, 1.047285091450e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.219033610086e+01, 1.043806722017e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.269964647470e+01, 1.053992929494e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.320895684853e+01, 1.064179136971e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02},
                                                   {0.0e+00, 1.0e+01, 2.0e+01, 3.0e+01, 4.0e+01, 5.0e+01, 6.0e+01, 7.0e+01, 8.0e+01, 9.000000000000e+01, 1.000000000000e+02}};

    CurvilinearGrid grid(gridPoints, Projection::cartesian);
    CurvilinearGridSnapGridToLandBoundary snapping(grid, northLandBoundary, snappingLine);

    // Compute snapping to land boundary
    [[maybe_unused]] auto dummyUndoAction = snapping.Compute();

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).x, mappedPointsX[i][j], snapping::tolerance) << "Difference in x-points: (" << i << ", " << j << ")";
        }
    }

    for (UInt i = 0; i < grid.NumM(); ++i)
    {
        for (UInt j = 0; j < grid.NumN(); ++j)
        {
            EXPECT_NEAR(grid.GetNode(i, j).y, mappedPointsY[i][j], snapping::tolerance) << "Difference in y-points: (" << i << ", " << j << ")";
        }
    }
}

TEST(SnapCurvilinearGridToLandBoundary, ChecksForFailingTests)
{

    // Tests the snapping throws exceptions when expected.

    LandBoundary eastLandBoundary({{104.303970, 97.152596}, {103.697906, 4.303172}});

    CurvilinearGrid grid(snapping::GetGridPoints10x10(), Projection::cartesian);

    std::vector<Point> snappingLine{Point(0.0, 100.0)};

    // Test should throw as there is only a single point defined for the grid line
    EXPECT_THROW([[maybe_unused]] CurvilinearGridSnapGridToLandBoundary snapping(grid, eastLandBoundary, snappingLine), ConstraintError);

    // Test should throw as there are more than four points defined for the grid line and region
    snappingLine = std::vector<Point>{Point(100, 10), Point(100, 90), Point(30.0, 0.0), Point(30.0, 100.0), Point(50.0, 100.0)};
    EXPECT_THROW([[maybe_unused]] CurvilinearGridSnapGridToLandBoundary snapping(grid, eastLandBoundary, snappingLine), ConstraintError);

    // Test should throw as one of the points is not valid
    snappingLine = std::vector<Point>{Point(100, 10), Point(100, 90), Point(/*Invalid point*/), Point(30.0, 100.0)};
    EXPECT_THROW([[maybe_unused]] CurvilinearGridSnapGridToLandBoundary snapping(grid, eastLandBoundary, snappingLine), ConstraintError);
}

TEST(SnapCurvilinearGridToSpline, SnapToSplineWholeEdgeDefinedRegion)
{
    std::unique_ptr<meshkernel::CurvilinearGrid> mesh = MakeCurvilinearGrid(0.0, 0.0, 1.0, 1.0, 11, 11);
    std::unique_ptr<meshkernel::CurvilinearGrid> meshCopy = std::make_unique<meshkernel::CurvilinearGrid>(*mesh);

    // Expected snapped mesh points
    // Column 9 in the curvilinear mesh
    std::vector<double> xPointsCol09{9.5, 9.5859048039673, 9.8514002945278, 9.8514011843911, 9.5859025562022, 9.3636721537842, 9.1677280547126, 9.0235868677295, 9.0235869844053, 9.1677283319708, 9.3636780592923};
    std::vector<double> yPointsCol09{0.0, 0.63750580759357, 1.620397677815, 3.3796003263282, 4.3624978254992, 5.2198726288676, 6.0785602721675, 7.004489322752, 7.9955112896497, 8.9214403197774, 9.7801371391123};

    // Column 10 in the curvilinear mesh
    std::vector<double> xPointsCol10{11.0, 11.171809607935, 11.702800589056, 11.702802368782, 11.171805112404, 10.727344307568, 10.335456109425, 10.047173735459, 10.047173968811, 10.335456663942, 10.727356118585};
    std::vector<double> yPointsCol10{0.0, 0.27501161518713, 1.24079535563, 3.7592006526563, 4.7249956509984, 5.4397452577353, 6.1571205443351, 7.0089786455039, 7.9910225792993, 8.8428806395548, 9.5602742782246};

    std::vector<meshkernel::Point> splinePoints({{11.0000, 0.0000},
                                                 {11.5878, 1.0000},
                                                 {11.9511, 2.0000},
                                                 {11.9511, 3.0000},
                                                 {11.5878, 4.0000},
                                                 {11.0000, 5.0000},
                                                 {10.4122, 6.0000},
                                                 {10.0489, 7.0000},
                                                 {10.0489, 8.0000},
                                                 {10.4122, 9.0000},
                                                 {11.0000, 10.0000}});

    std::vector<meshkernel::Point> snappingPoints({{10.0, 10.0}, {10.0, 0.0}, {8.0, 8.0}});

    meshkernel::Splines splines;
    splines.AddSpline(splinePoints);

    meshkernel::CurvilinearGridSnapGridToSpline snapping(*mesh, splines, snappingPoints);

    auto undoAction = snapping.Compute();

    constexpr double tolerance = 1.0e-12;

    // Compare mesh points with original mesh upto column 8
    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        for (meshkernel::UInt j = 0; j < 9; ++j)
        {
            EXPECT_NEAR(meshCopy->GetNode(i, j).x, mesh->GetNode(i, j).x, tolerance);
            EXPECT_NEAR(meshCopy->GetNode(i, j).y, mesh->GetNode(i, j).y, tolerance);
        }
    }

    // Compare mesh points with translated points for column 9
    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        EXPECT_NEAR(xPointsCol09[i], mesh->GetNode(i, 9).x, tolerance);
        EXPECT_NEAR(yPointsCol09[i], mesh->GetNode(i, 9).y, tolerance);
    }

    // Compare mesh points with translated points for column 10
    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        EXPECT_NEAR(xPointsCol10[i], mesh->GetNode(i, 10).x, tolerance);
        EXPECT_NEAR(yPointsCol10[i], mesh->GetNode(i, 10).y, tolerance);
    }

    //--------------------------------
    // Now check the undo

    undoAction->Restore();

    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        for (meshkernel::UInt j = 0; j < mesh->NumM(); ++j)
        {
            EXPECT_EQ(mesh->GetNode(i, j).x, meshCopy->GetNode(i, j).x);
            EXPECT_EQ(mesh->GetNode(i, j).y, meshCopy->GetNode(i, j).y);
        }
    }
}

TEST(SnapCurvilinearGridToSpline, SnapToSplinePartialEdgeDefaultRegion)
{
    std::unique_ptr<meshkernel::CurvilinearGrid> mesh = MakeCurvilinearGrid(0.0, 0.0, 1.0, 1.0, 11, 11);
    std::unique_ptr<meshkernel::CurvilinearGrid> meshCopy = std::make_unique<meshkernel::CurvilinearGrid>(*mesh);

    // The expected (x-) points, generated by interactor.
    std::vector<std::vector<double>> xPoints{{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.014873267871414519, 8.372359722435612994, 9.916182851714186341, 11.17180940417338775},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.021612916987076680, 8.541090219036453490, 10.33134050232082579, 11.70280126708063406},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.021612921838043420, 8.541090340482851317, 10.33134080113699937, 11.70280164927028110},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.014873257214348179, 8.372359455630595804, 9.916182195246349806, 11.17180856454275784},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.009231913341891662, 8.231125581765601495, 9.568679376010450710, 10.72734808288726427},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.004257781943209693, 8.106595706893173769, 9.262276376411159973, 10.33545478808742679},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.000598733449153954, 8.014989592258231710, 9.036881559829700095, 10.04717197944511220},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.000598734163229864, 8.014989610135470954, 9.036881603816251385, 10.04717203570446493},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0},
                                             {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0}};

    // The expected (y-) points, generated by interactor.
    std::vector<std::vector<double>> yPoints{{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                                             {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9907980331007956165, 0.7696241424499061790, 0.4331653038203038264, 0.2750112858449960118},
                                             {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.990363764459876617, 1.758752009170715835, 1.406414660633680480, 1.240796876357717071},
                                             {3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.009636224659985260, 3.241247718439566050, 3.593584669157450229, 3.759202266436699524},
                                             {4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.009201984124368678, 4.230376288790720807, 4.566835757237710958, 4.724990071261565561},
                                             {5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.005581416323523491, 5.139733557614412973, 5.343811324323562317, 5.439739013178277460},
                                             {6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.001994298641023740, 6.049928266931340559, 6.122847395199174869, 6.157123365388534886},
                                             {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000114079035108183, 7.002856025872458368, 7.007027188416842911, 7.008987862473465391},
                                             {8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.999885924712966556, 7.997144067962484115, 7.992973042461954059, 7.991012432823422884},
                                             {9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0},
                                             {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0}};

    std::vector<meshkernel::Point> splinePoints({{11.0000, 0.0000},
                                                 {11.5878, 1.0000},
                                                 {11.9511, 2.0000},
                                                 {11.9511, 3.0000},
                                                 {11.5878, 4.0000},
                                                 {11.0000, 5.0000},
                                                 {10.4122, 6.0000},
                                                 {10.0489, 7.0000},
                                                 {10.0489, 8.0000},
                                                 {10.4122, 9.0000},
                                                 {11.0000, 10.0000}});

    std::vector<meshkernel::Point> snappingPoints({{10.0, 8.0}, {10.0, 1.0}});

    meshkernel::Splines splines;
    splines.AddSpline(splinePoints);

    meshkernel::CurvilinearGridSnapGridToSpline snapping(*mesh, splines, snappingPoints);

    auto undoAction = snapping.Compute();

    // The tolerance to which the expected and calculated mesh points should be compared.
    // There are some differences in the optimised and non-optimised calculations, so a slightly weakened tolerance is used.
    constexpr double tolerance = 2.0e-5;

    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        for (meshkernel::UInt j = 0; j < mesh->NumM(); ++j)
        {
            EXPECT_NEAR(mesh->GetNode(i, j).x, xPoints[i][j], tolerance);
            EXPECT_NEAR(mesh->GetNode(i, j).y, yPoints[i][j], tolerance);
        }
    }

    //--------------------------------
    // Now check the undo

    undoAction->Restore();

    for (meshkernel::UInt i = 0; i < mesh->NumN(); ++i)
    {
        for (meshkernel::UInt j = 0; j < mesh->NumM(); ++j)
        {
            EXPECT_EQ(mesh->GetNode(i, j).x, meshCopy->GetNode(i, j).x);
            EXPECT_EQ(mesh->GetNode(i, j).y, meshCopy->GetNode(i, j).y);
        }
    }
}
