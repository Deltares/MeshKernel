name: Build and test on macos

on:
  #push:
  #  branches: 
  #    - master
  #    - 'release/v[0-9].[0-9].[0-9]'
  #    - 'feature/**'
  pull_request:
    #types:
    #  - opened
    #  - closed
    #  - auto_merge_enabled
    #  - ready_for_review
    branches: 
      - master
      - 'release/v[0-9].[0-9].[0-9]'
      - 'feature/**'
  # Allow triggering this workflow manually from the actions tab
  workflow_dispatch:

jobs:
  
  build:
    
    # Build strategy
    strategy:
      fail-fast: false
      matrix:
        os:
          #- 'ubuntu-latest'
          - 'macos-latest'
        type:
          - 'Release'
          #- 'Debug'
          #- 'DebugWithRelInfo '

    # Build platform
    runs-on: ${{matrix.os}}

    name: ${{ matrix.os }}-${{ matrix.type }}

    # default compiler on macos is clang, switch to gcc 11. Specifying the version is necessary.
    # It seems like gcc and g++ are symbolic links to the default clang and clang++ compilers, respectively.
    # CMAKE_CXX_COMPILER_ID will evaluate to AppleClang rather than GNU on macos.
    env:
      CC: gcc-11
      CXX: g++-11
    
      # Build steps
    steps:

      # Step: Checkout
      - name: Checkout
        uses: actions/checkout@v3
        # Workaround for getting "git describe --tags" to work in cmake/get_version_from_git.cmake (Build step)
        with:
          fetch-depth: 0
      
      # Step: Install dependencies
      # macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: | # brew update
          brew install boost@1.81
          brew install doxygen
      # Linux
      - name: Install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: | # sudo apt-get update && sudo apt upgrade
          sudo apt-get install libboost-all-dev
          sudo apt-get install doxygen
      
      # Step: NetCDF static library
      - name: Build and install NetCDF static library
        # Dependencies m4, curl, and openssl are provided by the build machine
        run: >
          pwsh ${{ github.workspace }}/scripts/install_netcdf_static.ps1
          -WorkDir ${{ github.workspace }}/netcdf/work
          -InstallDir ${{ github.workspace }}/netcdf/install
          -BuildType '${{ matrix.type }}'
          -ParallelJobs 10
      
      # Step: CMake configuration
      - name: Configure
        run: > 
          cmake
          -S ${{ github.workspace }}
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=${{matrix.type}}
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/netcdf/install/netcdf-c
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
      
      # Step: CMake build
      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Release -j

      # Step: Test
      - name: Test
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          ${{ github.workspace }}/build/libs/MeshKernel/tests/MeshKernelUnitTests
          echo -e "\n\n"
          ${{ github.workspace }}/build/libs/MeshKernelApi/tests/MeshKernelApiUnitTests

      # Step: CMake install
      - name: Install
        run: cmake --install ${{ github.workspace }}/build
      
      # Step: Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: meshkernel-${{ matrix.os }}-${{ matrix.type }}
          path: ${{ github.workspace }}/install
          if-no-files-found: error