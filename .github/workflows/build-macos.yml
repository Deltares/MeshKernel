name: Build and test on macos
on:
  #push:
  #  branches: 
  #    - master
  #    - 'release/v[0-9].[0-9].[0-9]'
  #    - 'feature/**'
  pull_request:
    types:
      - opened
      - closed
      - auto_merge_enabled
      - ready_for_review
    branches: 
      - master
      - 'release/v[0-9].[0-9].[0-9]'
      - 'feature/**'
jobs:
  build:
    runs-on: macos-latest
    # default compiler on macos is clang, switch to gcc 11. Specifying the version is necessary.
    # It seems like gcc and g++ are symbolic links to the default clang and clang++ compilers, respectively.
    # CMAKE_CXX_COMPILER_ID will evaluate to AppleClang rather than GNU on macos.
    env:
      CC: gcc-11
      CXX: g++-11
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      # Workaround for getting "git describe --tags" to work in cmake/get_version_from_git.cmake (Build step)
      with:
        fetch-depth: 0
    # Dependencies
    - name: Install missing dependencies
      run:  brew install boost@1.81
    - name: Build and install NetCDF static library
      # Dependencies m4, curl, and openssl are provided by the build machine
      run: >
        pwsh ./scripts/install_netcdf_static.ps1
        -WorkDir ./netcdf/work
        -InstallDir ./netcdf/install
        -BuildType 'Release'
        -ParallelJobs 10
    # Temporary NetCDF artifact, remove!
    - name: Upload NetCDF artifact [TEMPORARY, REMOVE ME]
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: artifact_netcdf
        path: ./netcdf/install
        if-no-files-found: error
    # CMake config
    - name: Configure
      run: > 
        cmake
        -S .
        -B ./build
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_PREFIX_PATH=./netcdf/install/netcdf-c/lib/cmake/netCDF
    # CMake build
    - name: Build
      run: cmake --build ./build --config Release -j
    # Have the whole build dir available as an artifact, even when the build fails
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: artifact_build
        path: ./build
        if-no-files-found: error