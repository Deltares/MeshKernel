name: Build and test workflow

on:
  workflow_call:
    inputs:
      platform:
        description: "Platform"
        required: true
        type: string
      build_type:
        description: "Build type"
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.platform }}
    name: ${{ inputs.platform }}-${{ inputs.build_type }}

    # Build steps
    steps:
      # Step: Checkout
      - name: Checkout
        uses: actions/checkout@v4
        # Workaround for getting "git describe --tags" to work in cmake/get_version_from_git.cmake (Build step)
        with:
          fetch-depth: 0

      # Step: Set compiler (use system Clang for all macOS versions)
      - name: Set compiler (macOS Clang)
        if: runner.os == 'macOS'
        run: |
          echo "Using system Clang for ${{ inputs.platform }}"
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
          echo "Configured Clang toolchain: $(clang --version | head -n 1)"

      # Step: Set paths
      - name: Set paths
        id: paths
        run: |
          echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
          echo "ext_deps_dir=${{ github.workspace }}/external_dependencies" >> $GITHUB_OUTPUT
          echo "install_dir=${{ github.workspace }}/install" >> $GITHUB_OUTPUT

      - name: Install system-provided dependencies
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            brew install boost doxygen
          elif [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get install libboost-all-dev doxygen
          fi

      # Step: Restore cached user-provided dependencies
      - name: Restore cached user-provided dependencies
        uses: actions/cache/restore@v3
        id: restore-cached-external-dependencies
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-cache-key-v2
          restore-keys: ${{ inputs.platform }}-${{ inputs.build_type }}-cache-key-v2
          path: ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c

      # Step: Check if netCDF cache directory already has contents (defensive guard)
      - name: Check if netCDF cache is populated
        id: check-nc-cache
        run: |
          netcdf_dir="${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c"
          if [ -d "$netcdf_dir" ] && [ "$(ls -A "$netcdf_dir" 2>/dev/null)" ]; then
            echo "has-deps=true" >> "$GITHUB_OUTPUT"
          else
            echo "has-deps=false" >> "$GITHUB_OUTPUT"
          fi

      # Step: Build and install user-provided dependencies, executes only if no cache restored
      - name: Build and install user-provided dependencies
        if: steps.check-nc-cache.outputs.has-deps == 'false'
        # NetCDF Dependencies m4, curl, and openssl are provided by the build machine
        run: >
          pwsh ${{ github.workspace }}/scripts/install_netcdf_static.ps1
          -WorkDir ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/work
          -InstallDir ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install
          -BuildType '${{ inputs.build_type }}'
          -ParallelJobs 10

      # Step: Cache user-provided dependencies, executes only if no cache restored
      - name: Cache user-provided dependencies
        uses: actions/cache/save@v3
        if: steps.restore-cached-external-dependencies.outputs.cache-hit != 'true'
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-cache-key-v2
          path: ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c

      # Step: CMake configuration
      - name: Configure
        run: >
          cmake
          -S ${{ github.workspace }}
          -B ${{ steps.paths.outputs.build_dir }}
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
          -DCMAKE_PREFIX_PATH=${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c
          -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install_dir }}

          cmake 
          -S /Users/runner/work/MeshKernel/MeshKernel 
          -B /Users/runner/work/MeshKernel/MeshKernel/build 
          -DCMAKE_BUILD_TYPE=Release 
          -DCMAKE_PREFIX_PATH=/Users/runner/work/MeshKernel/MeshKernel/external_dependencies/netcdf-c/install/netcdf-c 
          -DCMAKE_INSTALL_PREFIX=/Users/runner/work/MeshKernel/MeshKernel/install

      # Step: CMake build
      - name: Build
        run: cmake --build ${{ steps.paths.outputs.build_dir }} --config ${{ inputs.build_type }} -j 4

      # Step: Test
      #       Works if runner.os == 'Linux' or runner.os == 'macOS'
      #       if runner.os == 'Windows',  /inputs.build_type needs to be inserted before /tests
      - name: Test
        timeout-minutes: 10 # Set timeout to 10 minutes
        run: |
          echo -e "\n***************   MeshKernel Tests   ***************\n"
          ${{ steps.paths.outputs.build_dir }}/libs/MeshKernel/tests/MeshKernelUnitTests
          echo -e "\n\n*************** MeshKernel API Tests ***************\n"
          ${{ steps.paths.outputs.build_dir }}/libs/MeshKernelApi/tests/MeshKernelApiUnitTests

      # Step: CMake install
      - name: Install
        run: cmake --install ${{ steps.paths.outputs.build_dir }}

      # Step: Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: meshkernel-${{ inputs.platform }}-${{ inputs.build_type }}
          path: ${{ steps.paths.outputs.install_dir }}
          if-no-files-found: error
