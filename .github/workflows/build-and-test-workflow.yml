name: Build and test workflow

on:
  workflow_call:
    inputs:
      platform:
        description: "Platform"
        required: true
        type: string
      build_type:
        description: "Build type"
        required: true
        type: string

jobs:
  
  build:
    
    name: build-${{ inputs.platform }}-${{ inputs.build_type }}

    runs-on: ${{ inputs.platform }}

    # The default compiler on macos is clang, switch to gcc 11. Specifying the version is necessary.
    # It seems like gcc and g++ are symbolic links to the default clang and clang++ compilers, respectively.
    # CMAKE_CXX_COMPILER_ID will evaluate to AppleClang rather than GNU on macos.
    env:
      CC: gcc-11
      CXX: g++-11

    outputs:
      build_dir: ${{ steps.paths.outputs.build_dir }}
      deps_dir: ${{ steps.paths.outputs.ext_deps_dir }}
      install_dir: ${{ steps.paths.outputs.install_dir }}

    # Build steps
    steps:

      # Step: Checkout
      - name: Checkout
        uses: actions/checkout@v4
        # Workaround for getting "git describe --tags" to work in cmake/get_version_from_git.cmake (Build step)
        with:
          fetch-depth: 0

      # Step: Set paths
      - name: Set paths
        id: paths
        run : |
          echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
          echo "ext_deps_dir=${{ github.workspace }}/external_dependencies" >> $GITHUB_OUTPUT
          echo "install_dir=${{ github.workspace }}/install" >> $GITHUB_OUTPUT

      - name: Install system-provided dependencies
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            brew install boost doxygen netcdf
          elif [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get install libboost-all-dev doxygen
          fi

      # Step: Restore cached user-provided dependencies
      - if: runner.os != 'macOS'
        name: Restore cached user-provided dependencies
        uses: actions/cache/restore@v3
        id: restore-cached-external-dependencies
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-ext-deps-cache-key
          restore-keys: ${{ inputs.platform }}-${{ inputs.build_type }}-ext-deps-cache-key
          path: ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c

      # Step: Build and install user-provided dependencies, executes only if no cache restored
      - name: Build and install user-provided dependencies
        if: runner.os != 'macOS' && steps.restore-cached-external-dependencies.outputs.cache-hit != 'true'
        # NetCDF Dependencies m4, curl, and openssl are provided by the build machine
        run: >
          pwsh ${{ github.workspace }}/scripts/install_netcdf_static.ps1
          -WorkDir ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/work
          -InstallDir ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install
          -BuildType '${{ inputs.build_type }}'
          -ParallelJobs 10

      # Step: Cache user-provided dependencies, executes only if no cache restored
      - name: Cache user-provided dependencies
        uses: actions/cache/save@v3
        if: runner.os != 'macOS' && steps.restore-cached-external-dependencies.outputs.cache-hit != 'true'
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-ext-deps-cache-key
          path: ${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c

      # Step: CMake configuration
      - name: Configure
        run: >
          cmake
          -S ${{ github.workspace }}
          -B ${{ steps.paths.outputs.build_dir }}
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
          -DCMAKE_PREFIX_PATH=${{ steps.paths.outputs.ext_deps_dir }}/netcdf-c/install/netcdf-c
          -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install_dir }}
      
      # Step: CMake build
      - name: Build
        run: cmake --build ${{ steps.paths.outputs.build_dir }} --config ${{ inputs.build_type }} -j

      # Step: Cache the build directory for testing and deployment
      - name: Cache build
        uses: actions/cache/save@v3
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key
          path: ${{ steps.paths.outputs.build_dir }}

  test:

    name: test-${{ inputs.platform }}-${{ inputs.build_type }}

    needs: build

    runs-on: ${{ inputs.platform }}

    steps:

      # Step: Restore the build directory for testing
      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key
          restore-keys: ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key
          path: ${{ needs.build.outputs.build_dir }}

      # Step: Test backend
      #       Works if runner.os == 'Linux' or runner.os == 'macOS'
      #       if runner.os == 'Windows',  /inputs.build_type needs to be inserted before /tests
      - name: Test backend
        run: ${{ needs.build.outputs.build_dir }}/libs/MeshKernel/tests/MeshKernelUnitTests

      # Step: Test API
      - name: Test API
        run: ${{ needs.build.outputs.build_dir }}/libs/MeshKernelApi/tests/MeshKernelApiUnitTests

  artifact:

    name: deploy-${{ inputs.platform }}-${{ inputs.build_type }}

    needs: build

    runs-on: ${{ inputs.platform }}

    steps:

      # Step: Restore the build directory for testing
      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          key: ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key
          restore-keys: ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key
          path: ${{ needs.build.outputs.build_dir }}

      # Step: CMake install
      - name: Install
        run: cmake --install ${{ needs.build.outputs.build_dir }}
      
      # Step: Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: meshkernel-${{ inputs.platform }}-${{ inputs.build_type }}
          path: ${{ needs.build.outputs.install_dir }}
          if-no-files-found: error

  clean:
    name: clean-${{ inputs.platform }}-${{ inputs.build_type }}

    needs: build

    runs-on: ${{ inputs.platform }}

    steps:

      - run: gh cache delete ${{ inputs.platform }}-${{ inputs.build_type }}-build-cache-key

